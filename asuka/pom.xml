<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!-- 聚合工程 -->
    <groupId>com.asuka</groupId>
    <artifactId>asuka</artifactId>
    <version>1.0-SNAPSHOT</version>

    <!--
        注意：聚合和继承是不同的，
        聚合是指通过一个工程聚合几个工程，然后就可以统一编译打包等操作。
        继承是指子工程通过<parent>坐标继承父工程，使用父工程中的统一配置信息。
    -->

    <!-- 作为聚合工程的父工程，打包方式设置为pom，仅做资源管理和项目管理，不做业务代码开发 -->
    <packaging>pom</packaging>

    <!-- 聚合的工程 -->
    <modules>
        <module>../asuka-dao</module>
        <module>../asuka-controller</module>
    </modules>

    <!-- 多环境配置，不同环境使用不同的配置资源，项目运行参数要设置使用哪个环境，启动参数后面跟 -P dev 表示使用开发环境 -->
    <!-- 注意，打包时，如果没有设置默认启动环境，那么一定要带环境变量参数才行，不然读不到配置的属性值 -->
    <profiles>
        <!-- 开发环境 -->
        <profile>
            <id>dev</id>
            <properties>
                <jdbc.url>jdbc:mysql://127.0.0.1:3306/asuka</jdbc.url>
            </properties>
            <!-- 默认启动这个环境 -->
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>

        <!-- 测试环境 -->
        <profile>
            <id>test</id>
            <properties>
                <jdbc.url>jdbc:mysql://127.1.1.1:3306/asuka</jdbc.url>
            </properties>
        </profile>

        <!-- 生产环境 -->
        <profile>
            <id>prod</id>
            <properties>
                <jdbc.url>jdbc:mysql://127.2.2.1:3306/asuka</jdbc.url>
            </properties>
        </profile>
    </profiles>

    <!-- 属性自定义，定义好的属性通过${}使用，方便统一管理，类似java中的定义一处变量，就可以在多个地方用了，一个地方改就可以 -->
    <!--
        注意：属性有很多种，都可以通过${属性名}进行读取
        有自定义属性，使用：${spring.version}
        有maven内置的属性，使用：${basedir},${version}，
        有maven的配置文件setting.xml中的属性，使用：${maven.localRepository}
        有java系统属性，使用：${user.name}
        有环境变量属性，使用：${env.JAVA_HOME}

        系统属性查询方式：mvn help:system
        属性配置文件就可以通过maven配置变量的值，然后通过${}来引用了。
     -->
    <properties>
        <spring.version>5.1.3.RELEASE</spring.version>
        <!-- 设置子工程属性文件中的变量值(asuka-dao下的jdbc.properties里的属性变量)，注意还要设置jdbc.properties的位置，在<build>中设置 -->
        <jdbc.password>123456</jdbc.password>
        <error.page>index.jsp</error.page>
    </properties>

    <!-- 父工程可以统一管理子工程的包资源，统一管理版本，这里添加了包资源依赖，在子工程中就可以通过ga坐标简化依赖引用 -->
    <dependencyManagement>
        <dependencies>

            <dependency>
                <groupId>com.asuka</groupId>
                <artifactId>asuka-dao</artifactId>
                <version>1.0-SNAPSHOT</version>
            </dependency>

            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-core</artifactId>
                <version>${spring.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-context</artifactId>
                <version>${spring.version}</version>
            </dependency>

            <dependency>
                <groupId>org.mybatis</groupId>
                <artifactId>mybatis</artifactId>
                <version>3.4.6</version>
            </dependency>
        </dependencies>
    </dependencyManagement>


    <build>
        <!-- pluginManagement和dependencyManagement类似，是父工程对插件的统一配置，子工程只需要通过ga坐标引用就可以 -->
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.tomcat.maven</groupId>
                    <artifactId>tomcat7-maven-plugin</artifactId>
                    <version>2.1</version>
                    <configuration>
                        <port>80</port>
                        <path>/</path>
                    </configuration>
                </plugin>

                <!-- 使得web.xml中也可以使用maven中定义的属性 -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-war-plugin</artifactId>
                    <configuration>
                        <webResources>
                            <resource>
                                <filtering>true</filtering>
                                <directory>src/main/webapp</directory>
                                <includes>
                                    <include>**/web.xml</include>
                                </includes>
                            </resource>
                        </webResources>
                        <warSourceDirectory>src/main/webapp</warSourceDirectory>
                        <webXml>src/main/webapp/WEB-INF/web.xml</webXml>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>

        <resources>
            <resource>
                <!-- 通过 ../项目名 的形式，如果有好几个项目的话，要配置多次，可以通过maven提供的属性进行统一配置 -->
                <!--<directory>../asuka-dao/src/main/resources</directory>-->
                <!-- ${project.basedir}代表所有的工程中满足这样结构的目录 -->
                <directory>${project.basedir}/src/main/resources</directory>
                <!-- 设置为true，表示参与过滤 -->
                <filtering>true</filtering>
            </resource>
            <resource>
                <directory>${project.basedir}/src/main/webapp/WEB-INF</directory>
                <filtering>true</filtering>
            </resource>
        </resources>

        <testResources>
            <testResource>
                <directory>${project.basedir}/src/test/resources</directory>
                <filtering>true</filtering>
            </testResource>
        </testResources>
    </build>
</project>